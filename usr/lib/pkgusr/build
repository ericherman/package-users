#!/bin/bash
#
# This build script is meant to be executed either from within the
# source directory created by extracting the tarball, or from the
# package user's home directory.
#
# If run from the home directory, there should be a source tarball in
# $HOME/src; it will be unpacked.  The top-level directory created by
# unpacking the tarball should be the same as the first part of the
# tarball. Then, if there are patches in a directory $HOME/patches, they
# will be applied (with `-p1`).
#
# It will create 8 log files in the $HOME/logs directory:
#   00-configure.log: All messages output during configure
#   00-configure.err: Just the errors output during configure
#   01-make.log: All messages output during make
#   01-make.err: Just the errors output during make
#   02-test.log: All messages output during make check
#   02-test.err: Just the errors output during make check
#   03-install.log: All messages output during make install
#   03-install.err: Just the errors output during make install
#
# After running the script you should check the `*.err` files to see if
# any problems have occurred. If any did, you should use the
# corresponding `*.log` files to see the error messages in context.

if ! initial_checkup
then
    echo "aborting!"
    exit 1
fi

function apply_patches()
{
    PATCHDIR="${HOME}/patches"
    for PATCH in ${PATCHDIR}/*
    do
        if [ -f $PATCH ]; then
            patch -p1 < $PATCH || exit 3
            # echo $PATCH >> ~/.project
        fi
    done
}

function run_stage()
{
    STAGENAME=$1
    STAGENUMBER=$2
    COMMAND=$3
    LOG=${HOME}/logs/${STAGENUMBER}-${STAGENAME}
    echo -n ${STAGENAME}...
    BEFORE=$(date +%s)
    { $COMMAND 3>&1 1>&2 2>&3 | tee "${LOG}.err" ;} &> "${LOG}.log"
    for i in "${PIPESTATUS[@]}"
    do
        test $i != 0 && { echo FAILED! ; exit 1 ; }
    done
    AFTER=$(date +%s)
    echo "successful! ($(($AFTER - $BEFORE)) seconds)"
    return 0
}

# if we are in home directory, as opposed to a source or build
# directory, try to prepare the source directory and switch to it.
if [ ${PWD} = ${HOME} ]
then
    if [ ! -d "${HOME}/src" ]
    then
        echo "There is no src directory! Prepare the source manually."
        exit 1
    fi
    SOURCEDIR="${HOME}/src"
    if [ -f ${SOURCEDIR}/*.lzma ]
    then
        lzma -d < ${SOURCEDIR}/*.lzma | tar xf -
    else
        tar xf ${SOURCEDIR}/*.tar*
    fi

    if [ "_${SOURCE_DIR_PREFIX}_" != "__" ]
    then
        cd ${SOURCE_DIR_PREFIX}*
    else
        SRCDIR=$(ls -1 src | sed 's@\.tar.*@@')
        cd ${SRCDIR} || exit 2
    fi

    # add package name to .project
    # echo $(basename $(readlink -f $(pwd))) >> ~/.project
    if [ -d "${HOME}/patches" ]
    then
        apply_patches
    fi
fi

if [ -n "${BUILD_DIR}" ]
then
    mkdir -p ${BUILD_DIR}
    cd ${BUILD_DIR}
fi

run_stage 'configure' 00 'configure_commands'
run_stage 'build' 01 'make_commands'
run_stage 'test' 02 'test_commands'
run_stage 'install' 03 'install_commands'
